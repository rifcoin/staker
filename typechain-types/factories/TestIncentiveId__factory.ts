/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestIncentiveId,
  TestIncentiveIdInterface,
} from "../TestIncentiveId";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20Minimal",
            name: "rewardToken",
            type: "address",
          },
          {
            internalType: "contract IRifainSwap",
            name: "pool",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTime",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "refundee",
            type: "address",
          },
        ],
        internalType: "struct IRifainSwapStaker.IncentiveKey",
        name: "key",
        type: "tuple",
      },
    ],
    name: "compute",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101d0806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636ab7d88014610030575b600080fd5b61004361003e3660046100f1565b610055565b60405190815260200160405180910390f35b600061006082610066565b92915050565b6000816040516020016100c49190815173ffffffffffffffffffffffffffffffffffffffff90811682526020808401518216908301526040808401519083015260608084015190830152608092830151169181019190915260a00190565b604051602081830303815290604052805190602001209050919050565b80356100ec8161019e565b919050565b600060a0828403121561010357600080fd5b60405160a0810181811067ffffffffffffffff8211171561014d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052823561015b8161019e565b8152602083013561016b8161019e565b806020830152506040830135604082015260608301356060820152610192608084016100e1565b60808201529392505050565b73ffffffffffffffffffffffffffffffffffffffff811681146101c057600080fd5b5056fea164736f6c6343000806000a";

type TestIncentiveIdConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestIncentiveIdConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestIncentiveId__factory extends ContractFactory {
  constructor(...args: TestIncentiveIdConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestIncentiveId> {
    return super.deploy(overrides || {}) as Promise<TestIncentiveId>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestIncentiveId {
    return super.attach(address) as TestIncentiveId;
  }
  connect(signer: Signer): TestIncentiveId__factory {
    return super.connect(signer) as TestIncentiveId__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestIncentiveIdInterface {
    return new utils.Interface(_abi) as TestIncentiveIdInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestIncentiveId {
    return new Contract(address, _abi, signerOrProvider) as TestIncentiveId;
  }
}
