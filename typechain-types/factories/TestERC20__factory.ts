/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestERC20, TestERC20Interface } from "../TestERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountToMint",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516108f33803806108f383398101604081905261002f916100cc565b610039338261003f565b5061010b565b6001600160a01b0382166000908152602081905260408120546100639083906100e5565b9050818110156100ac5760405162461bcd60e51b815260206004820152601060248201526f6f766572666c6f772062616c616e636560801b604482015260640160405180910390fd5b6001600160a01b0390921660009081526020819052604090209190915550565b6000602082840312156100de57600080fd5b5051919050565b6000821982111561010657634e487b7160e01b600052601160045260246000fd5b500190565b6107d98061011a6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c806370a082311161005057806370a08231146100c7578063a9059cbb146100f5578063dd62ed3e1461010857600080fd5b8063095ea7b31461007757806323b872dd1461009f57806340c10f19146100b2575b600080fd5b61008a610085366004610744565b610133565b60405190151581526020015b60405180910390f35b61008a6100ad366004610708565b6101ac565b6100c56100c0366004610744565b610427565b005b6100e76100d53660046106b3565b60006020819052908152604090205481565b604051908152602001610096565b61008a610103366004610744565b6104f1565b6100e76101163660046106d5565b600160209081526000928352604080842090915290825290205481565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061019b9086815260200190565b60405180910390a350600192915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602090815260408083203384529091528120548281101561024c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f616c6c6f77616e636520696e73756666696369656e740000000000000000000060448201526064015b60405180910390fd5b6102568382610786565b73ffffffffffffffffffffffffffffffffffffffff80871660009081526001602090815260408083203384528252808320949094559187168152908190522054806102a1858261076e565b1015610309576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6f766572666c6f772062616c616e636520726563697069656e740000000000006044820152606401610243565b610313848261076e565b73ffffffffffffffffffffffffffffffffffffffff8087166000908152602081905260408082209390935590881681522054848110156103af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f756e646572666c6f772062616c616e63652073656e64657200000000000000006044820152606401610243565b6103b98582610786565b73ffffffffffffffffffffffffffffffffffffffff8881166000818152602081815260409182902094909455518881529189169290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35060019695505050505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604081205461045890839061076e565b9050818110156104c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6f766572666c6f772062616c616e6365000000000000000000000000000000006044820152606401610243565b73ffffffffffffffffffffffffffffffffffffffff90921660009081526020819052604090209190915550565b336000908152602081905260408120548281101561056b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f696e73756666696369656e742062616c616e63650000000000000000000000006044820152606401610243565b6105758382610786565b336000908152602081905260408082209290925573ffffffffffffffffffffffffffffffffffffffff861681522054806105af858261076e565b1015610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f726563697069656e742062616c616e6365206f766572666c6f770000000000006044820152606401610243565b610621848261076e565b73ffffffffffffffffffffffffffffffffffffffff8616600081815260208181526040918290209390935551868152909133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3506001949350505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146106ae57600080fd5b919050565b6000602082840312156106c557600080fd5b6106ce8261068a565b9392505050565b600080604083850312156106e857600080fd5b6106f18361068a565b91506106ff6020840161068a565b90509250929050565b60008060006060848603121561071d57600080fd5b6107268461068a565b92506107346020850161068a565b9150604084013590509250925092565b6000806040838503121561075757600080fd5b6107608361068a565b946020939093013593505050565b600082198211156107815761078161079d565b500190565b6000828210156107985761079861079d565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea164736f6c6343000806000a";

type TestERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestERC20__factory extends ContractFactory {
  constructor(...args: TestERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    amountToMint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestERC20> {
    return super.deploy(amountToMint, overrides || {}) as Promise<TestERC20>;
  }
  getDeployTransaction(
    amountToMint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(amountToMint, overrides || {});
  }
  attach(address: string): TestERC20 {
    return super.attach(address) as TestERC20;
  }
  connect(signer: Signer): TestERC20__factory {
    return super.connect(signer) as TestERC20__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC20Interface {
    return new utils.Interface(_abi) as TestERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC20 {
    return new Contract(address, _abi, signerOrProvider) as TestERC20;
  }
}
